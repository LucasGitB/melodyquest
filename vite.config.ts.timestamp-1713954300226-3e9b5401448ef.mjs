// vite.config.ts
import "file:///C:/Users/atash/OneDrive/Documents/GitHub/melodyquest/node_modules/dotenv/config.js";
import { defineConfig } from "file:///C:/Users/atash/OneDrive/Documents/GitHub/melodyquest/node_modules/vite/dist/node/index.js";
import { getMaps, getMapsOptimizers, getMapsScripts, LogLevel } from "file:///C:/Users/atash/OneDrive/Documents/GitHub/melodyquest/node_modules/wa-map-optimizer-vite/dist/index.js";
var maps = getMaps();
var optimizerOptions = {
  logs: process.env.LOG_LEVEL && process.env.LOG_LEVEL in LogLevel ? LogLevel[process.env.LOG_LEVEL] : LogLevel.NORMAL
};
if (process.env.TILESET_OPTIMIZATION && process.env.TILESET_OPTIMIZATION === "true") {
  const qualityMin = process.env.TILESET_OPTIMIZATION_QUALITY_MIN ? parseInt(process.env.TILESET_OPTIMIZATION_QUALITY_MIN) : 0.9;
  const qualityMax = process.env.TILESET_OPTIMIZATION_QUALITY_MAX ? parseInt(process.env.TILESET_OPTIMIZATION_QUALITY_MAX) : 1;
  optimizerOptions.output = {
    tileset: {
      compress: {
        quality: [qualityMin, qualityMax]
      }
    }
  };
}
var vite_config_default = defineConfig({
  base: "./",
  build: {
    rollupOptions: {
      input: {
        index: "./index.html",
        ...getMapsScripts(maps)
      }
    }
  },
  plugins: [...getMapsOptimizers(maps, optimizerOptions)],
  server: {
    host: "localhost",
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, PATCH, OPTIONS",
      "Access-Control-Allow-Headers": "X-Requested-With, content-type, Authorization",
      "Cache-Control": "no-cache, no-store, must-revalidate"
    },
    open: "/"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxhdGFzaFxcXFxPbmVEcml2ZVxcXFxEb2N1bWVudHNcXFxcR2l0SHViXFxcXG1lbG9keXF1ZXN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxhdGFzaFxcXFxPbmVEcml2ZVxcXFxEb2N1bWVudHNcXFxcR2l0SHViXFxcXG1lbG9keXF1ZXN0XFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9hdGFzaC9PbmVEcml2ZS9Eb2N1bWVudHMvR2l0SHViL21lbG9keXF1ZXN0L3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0ICdkb3RlbnYvY29uZmlnJztcclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IHsgZ2V0TWFwcywgZ2V0TWFwc09wdGltaXplcnMsIGdldE1hcHNTY3JpcHRzLCBMb2dMZXZlbCwgT3B0aW1pemVPcHRpb25zIH0gZnJvbSBcIndhLW1hcC1vcHRpbWl6ZXItdml0ZVwiO1xyXG5cclxuY29uc3QgbWFwcyA9IGdldE1hcHMoKTtcclxuXHJcbmxldCBvcHRpbWl6ZXJPcHRpb25zOiBPcHRpbWl6ZU9wdGlvbnMgPSB7XHJcbiAgICBsb2dzOiBwcm9jZXNzLmVudi5MT0dfTEVWRUwgJiYgcHJvY2Vzcy5lbnYuTE9HX0xFVkVMIGluIExvZ0xldmVsID8gTG9nTGV2ZWxbcHJvY2Vzcy5lbnYuTE9HX0xFVkVMXSA6IExvZ0xldmVsLk5PUk1BTCxcclxufTtcclxuXHJcbmlmIChwcm9jZXNzLmVudi5USUxFU0VUX09QVElNSVpBVElPTiAmJiBwcm9jZXNzLmVudi5USUxFU0VUX09QVElNSVpBVElPTiA9PT0gXCJ0cnVlXCIpIHtcclxuICAgIGNvbnN0IHF1YWxpdHlNaW4gPSBwcm9jZXNzLmVudi5USUxFU0VUX09QVElNSVpBVElPTl9RVUFMSVRZX01JTiA/IHBhcnNlSW50KHByb2Nlc3MuZW52LlRJTEVTRVRfT1BUSU1JWkFUSU9OX1FVQUxJVFlfTUlOKSA6IDAuOTtcclxuICAgIGNvbnN0IHF1YWxpdHlNYXggPSBwcm9jZXNzLmVudi5USUxFU0VUX09QVElNSVpBVElPTl9RVUFMSVRZX01BWCA/IHBhcnNlSW50KHByb2Nlc3MuZW52LlRJTEVTRVRfT1BUSU1JWkFUSU9OX1FVQUxJVFlfTUFYKSA6IDE7XHJcblxyXG4gICAgb3B0aW1pemVyT3B0aW9ucy5vdXRwdXQgPSB7XHJcbiAgICAgICAgdGlsZXNldDoge1xyXG4gICAgICAgICAgICBjb21wcmVzczoge1xyXG4gICAgICAgICAgICAgICAgcXVhbGl0eTogW3F1YWxpdHlNaW4sIHF1YWxpdHlNYXhdLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gICAgYmFzZTogXCIuL1wiLFxyXG4gICAgYnVpbGQ6IHtcclxuICAgICAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogXCIuL2luZGV4Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgIC4uLmdldE1hcHNTY3JpcHRzKG1hcHMpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgcGx1Z2luczogWy4uLmdldE1hcHNPcHRpbWl6ZXJzKG1hcHMsIG9wdGltaXplck9wdGlvbnMpXSxcclxuICAgIHNlcnZlcjoge1xyXG4gICAgICAgIGhvc3Q6IFwibG9jYWxob3N0XCIsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiOiBcIipcIixcclxuICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCI6IFwiR0VULCBQT1NULCBQVVQsIERFTEVURSwgUEFUQ0gsIE9QVElPTlNcIixcclxuICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCI6IFwiWC1SZXF1ZXN0ZWQtV2l0aCwgY29udGVudC10eXBlLCBBdXRob3JpemF0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiQ2FjaGUtQ29udHJvbFwiOiBcIm5vLWNhY2hlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvcGVuOiBcIi9cIixcclxuICAgIH0sXHJcbn0pO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQTRWLE9BQU87QUFDblcsU0FBUyxvQkFBb0I7QUFDN0IsU0FBUyxTQUFTLG1CQUFtQixnQkFBZ0IsZ0JBQWlDO0FBRXRGLElBQU0sT0FBTyxRQUFRO0FBRXJCLElBQUksbUJBQW9DO0FBQUEsRUFDcEMsTUFBTSxRQUFRLElBQUksYUFBYSxRQUFRLElBQUksYUFBYSxXQUFXLFNBQVMsUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTO0FBQ2xIO0FBRUEsSUFBSSxRQUFRLElBQUksd0JBQXdCLFFBQVEsSUFBSSx5QkFBeUIsUUFBUTtBQUNqRixRQUFNLGFBQWEsUUFBUSxJQUFJLG1DQUFtQyxTQUFTLFFBQVEsSUFBSSxnQ0FBZ0MsSUFBSTtBQUMzSCxRQUFNLGFBQWEsUUFBUSxJQUFJLG1DQUFtQyxTQUFTLFFBQVEsSUFBSSxnQ0FBZ0MsSUFBSTtBQUUzSCxtQkFBaUIsU0FBUztBQUFBLElBQ3RCLFNBQVM7QUFBQSxNQUNMLFVBQVU7QUFBQSxRQUNOLFNBQVMsQ0FBQyxZQUFZLFVBQVU7QUFBQSxNQUNwQztBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0o7QUFFQSxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUN4QixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsSUFDSCxlQUFlO0FBQUEsTUFDWCxPQUFPO0FBQUEsUUFDSCxPQUFPO0FBQUEsUUFDUCxHQUFHLGVBQWUsSUFBSTtBQUFBLE1BQzFCO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUNBLFNBQVMsQ0FBQyxHQUFHLGtCQUFrQixNQUFNLGdCQUFnQixDQUFDO0FBQUEsRUFDdEQsUUFBUTtBQUFBLElBQ0osTUFBTTtBQUFBLElBQ04sU0FBUztBQUFBLE1BQ0wsK0JBQStCO0FBQUEsTUFDL0IsZ0NBQWdDO0FBQUEsTUFDaEMsZ0NBQWdDO0FBQUEsTUFDaEMsaUJBQWlCO0FBQUEsSUFDckI7QUFBQSxJQUNBLE1BQU07QUFBQSxFQUNWO0FBQ0osQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
